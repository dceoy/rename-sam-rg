#!/usr/bin/env bash
#
# Tiny Command to Replace Read-Group Tags of a SAM file
#
# Usage:
#   replace-sam-read-group [--debug] [--lb=<str>] [--pl=<str>] [--pu=<str>]
#     [--sm=<str>] <input_sam> <output>
#   replace-sam-read-group --version
#   replace-sam-read-group -h|--help
#
# Options:
#   --debug           Debug mode
#   --lb=<str>        Replace a read-group library (LB)
#   --pl=<str>        Replace a read-group platform (PL)
#   --pu=<str>        Replace a read-group platform unit (PU)
#   --sm=<str>        Replace a read-group sample name (SM)
#   --version         Print version
#   -h, --help        Print usage
#
# Arguments:
#   <arg>             Main arguments

set -euo pipefail

if [[ ${#} -ge 1 ]]; then
  for a in "${@}"; do
    [[ "${a}" = '--debug' ]] && set -x && break
  done
fi

COMMAND_PATH=$(realpath "${0}")
COMMAND_NAME=$(basename "${COMMAND_PATH}")
COMMAND_VERSION='v0.1.0'

RG_KEYS=('ID' 'BC' 'CN' 'DS' 'DT' 'FO' 'KS' 'LB' 'PG' 'PI' 'PL' 'PM' 'PU' 'SM')
UPDATED_RG_KEYS=()
MAIN_ARGS=()

function print_version {
  echo "${COMMAND_NAME}: ${COMMAND_VERSION}"
}

function print_usage {
  sed -ne '1,2d; /^#/!q; s/^#$/# /; s/^# //p;' "${COMMAND_PATH}"
}

function abort {
  {
    if [[ ${#} -eq 0 ]]; then
      cat -
    else
      COMMAND_NAME=$(basename "${COMMAND_PATH}")
      echo "${COMMAND_NAME}: ${*}"
    fi
  } >&2
  exit 1
}

while [[ ${#} -ge 1 ]]; do
  case "${1}" in
    '--debug' )
      shift 1
      ;;
    '--version' )
      print_version && exit 0
      ;;
    '-h' | '--help' )
      print_usage && exit 0
      ;;
    --*=* )
      k=$(echo -e "${1%%\=*}" | sed -e 's/^-\+//; s/^.*$/\U\0/;')
      if [[ ${#k} -eq 2 ]] && [[ ${RG_KEYS[*]} =~ ${k} ]]; then
        UPDATED_RG_KEYS+=("${k}")
        eval "NEW_${k}='${1#*\=}'" && shift 1
      else
        abort "invalid option: ${1}"
      fi
      ;;
    --* )
      k=$(echo -e "${1}" | sed -e 's/^-\+//; s/^.*$/\U\0/;')
      if [[ ${#k} -eq 2 ]] && [[ ${RG_KEYS[*]} =~ ${k} ]]; then
        UPDATED_RG_KEYS+=("${k}")
        eval "NEW_${k}='${2}'" && shift 2
      else
        abort "invalid option: ${1}"
      fi
      ;;
    * )
      MAIN_ARGS+=("${1}") && shift 1
      ;;
  esac
done

[[ ${#UPDATED_RG_KEYS[@]} -gt 0 ]] \
  || abort 'replacement option not found.'
[[ ${#MAIN_ARGS[@]} -eq 2 ]] \
  || abort "invalid arguments: ${MAIN_ARGS[*]}"

REHEADER_SED=''
for k in "${UPDATED_RG_KEYS[@]}"; do
  v=$(eval "echo -e \"\${NEW_${k}}\"")
  if [[ -n "${v}" ]]; then
    REHEADER_SED+="s/^\\(@RG\\t.*\\t${k}\\):[^\\t]\\+/\\1:${v}/;"
  fi
done

SRC_SAM="${MAIN_ARGS[0]}"
DST_SAM="${MAIN_ARGS[1]}"
if [[ "${DST_SAM:0:5}" = 's3://' ]]; then
  samtools reheader --command "sed -e \"${REHEADER_SED}\"" "${SRC_SAM}" \
    | aws s3 cp - "${DST_SAM}"
else
  samtools reheader --command "sed -e \"${REHEADER_SED}\"" "${SRC_SAM}" \
    > "${DST_SAM}"
fi
