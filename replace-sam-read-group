#!/usr/bin/env bash
#
# Command to atomically replace Read-Group tags in a BAM or CRAM file
#
# Usage:
#   replace-sam-read-group [--debug] [--cpus=<int>] [--index-sam] [--lb=<str>]
#     [--pl=<str>] [--pu=<str>] [--sm=<str>] [--output-sam=<path>] <input_sam>
#   replace-sam-read-group --version
#   replace-sam-read-group -h|--help
#
# Options:
#   --debug               Enable debug mode
#   --cpus=<int>          Limit CPUs for multiprocessing
#   --index-sam           Create a BAM or CRAM index file
#   --lb=<str>            Replace a read-group library (LB)
#   --pl=<str>            Replace a read-group platform (PL)
#   --pu=<str>            Replace a read-group platform unit (PU)
#   --sm=<str>            Replace a read-group sample name (SM)
#   --output-sam=<path>   Specify a ath to an output BAM or CRAM file
#   --version             Print version information and exit
#   -h, --help            Print this help text and exit
#
# Arguments:
#   <input_sam>           Path to an input BAM or CRAM file

set -euo pipefail

if [[ ${#} -ge 1 ]]; then
  for a in "${@}"; do
    [[ "${a}" = '--debug' ]] && set -x && break
  done
fi

COMMAND_PATH=$(realpath "${0}")
COMMAND_NAME=$(basename "${COMMAND_PATH}")
COMMAND_VERSION='v0.2.0'
RG_KEYS=('ID' 'BC' 'CN' 'DS' 'DT' 'FO' 'KS' 'LB' 'PG' 'PI' 'PL' 'PM' 'PU' 'SM')

function print_version {
  echo "${COMMAND_NAME}: ${COMMAND_VERSION}"
}

function print_usage {
  sed -ne '1,2d; /^#/!q; s/^#$/# /; s/^# //p;' "${COMMAND_PATH}"
}

function abort {
  {
    if [[ ${#} -eq 0 ]]; then
      cat -
    else
      COMMAND_NAME=$(basename "${COMMAND_PATH}")
      echo "${COMMAND_NAME}: ${*}"
    fi
  } >&2
  exit 1
}

case "${OSTYPE}" in
  darwin* )
    CPUS=$(sysctl -n hw.ncpu)
    ;;
  linux* )
    CPUS=$(grep -ce '^processor\s\+:' /proc/cpuinfo)
    ;;
  * )
    CPUS=1
    :
    ;;
esac
UPDATED_RG_KEYS=()
MAIN_ARGS=()
INDEX_SAM=0
OUTPUT_SAM=''

while [[ ${#} -ge 1 ]]; do
  case "${1}" in
    --debug )
      shift 1
      ;;
    --cpus )
      CPUS="${2}" && shift 2
      ;;
    --cpus=* )
      CPUS="${1#*\=}" && shift 1
      ;;
    --index-sam )
      INDEX_SAM=1 && shift 1
      ;;
    --version )
      print_version && exit 0
      ;;
    -h | --help )
      print_usage && exit 0
      ;;
    --output-sam )
      OUTPUT_SAM="${2}" && shift 2
      ;;
    --output-sam=* )
      OUTPUT_SAM="${1#*\=}" && shift 1
      ;;
    --*=* )
      k=$(echo -e "${1%%\=*}" | sed -e 's/^-\+//; s/^.*$/\U\0/;')
      if [[ ${#k} -eq 2 ]] && [[ ${RG_KEYS[*]} =~ ${k} ]]; then
        UPDATED_RG_KEYS+=("${k}")
        eval "NEW_${k}='${1#*\=}'" && shift 1
      else
        abort "invalid option: ${1}"
      fi
      ;;
    --* )
      k=$(echo -e "${1}" | sed -e 's/^-\+//; s/^.*$/\U\0/;')
      if [[ ${#k} -eq 2 ]] && [[ ${RG_KEYS[*]} =~ ${k} ]]; then
        UPDATED_RG_KEYS+=("${k}")
        eval "NEW_${k}='${2}'" && shift 2
      else
        abort "invalid option: ${1}"
      fi
      ;;
    - )
      MAIN_ARGS+=("${1}") && shift 1
      ;;
    -* )
      abort "invalid option: ${1}"
      ;;
    * )
      MAIN_ARGS+=("${1}") && shift 1
      ;;
  esac
done

[[ ${#UPDATED_RG_KEYS[@]} -eq 0 ]] \
  && abort 'missing replacement options'
[[ ${#MAIN_ARGS[@]} -lt 1 ]] \
  && abort 'missing arguments'
[[ ${#MAIN_ARGS[@]} -gt 1 ]] \
  && abort 'too many arguments'
INPUT_SAM="${MAIN_ARGS[0]}"

reheader_sed=''
for k in "${UPDATED_RG_KEYS[@]}"; do
  v=$(eval "set -eu && echo -e \"\${NEW_${k}}\"")
  [[ -z "${v}" ]] \
    || reheader_sed+="s/^\\(@RG\\t.*\\t${k}\\):[^\\t]\\+/\\1:${v}/;"
done

if [[ -z "${OUTPUT_SAM}" ]]; then
  samtools reheader -c "sed -e \"${reheader_sed}\"" "${INPUT_SAM}"
else
  if [[ "${OUTPUT_SAM:0:5}" = 's3://' ]]; then
    if [[ "${INPUT_SAM}" = "${OUTPUT_SAM}" ]]; then
      samtools reheader -c "sed -e \"${reheader_sed}\"" "${INPUT_SAM}" \
        | aws s3 cp - "${OUTPUT_SAM}.reheader.${OUTPUT_SAM##*.}"
      aws s3 cp "${OUTPUT_SAM}.reheader.${OUTPUT_SAM##*.}" "${OUTPUT_SAM}"
      aws s3 rm "${OUTPUT_SAM}.reheader.${OUTPUT_SAM##*.}"
    else
      samtools reheader -c "sed -e \"${reheader_sed}\"" "${INPUT_SAM}" \
        | aws s3 cp - "${OUTPUT_SAM}"
    fi
  elif [[ "${INPUT_SAM}" = "${OUTPUT_SAM}" ]]; then
    samtools reheader -c "sed -e \"${reheader_sed}\"" "${INPUT_SAM}" \
      > "${OUTPUT_SAM}.reheader.${OUTPUT_SAM##*.}"
    mv "${OUTPUT_SAM}.reheader.${OUTPUT_SAM##*.}" "${OUTPUT_SAM}"
  else
    samtools reheader -c "sed -e \"${reheader_sed}\"" "${INPUT_SAM}" \
      > "${OUTPUT_SAM}"
  fi
  [[ ${INDEX_SAM} -eq 0 ]] \
    || samtools index -@ "${CPUS}" "${OUTPUT_SAM}"
fi
